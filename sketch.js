//web browser sine wave instrument
//written with assistance from Stephen Roddy, Sebastian Adams, and Aidan Reilly


const filter = new Tone.Filter(440, "highpass").toDestination(); //make lopass, connect to output
const minCutoff = 250;
const maxCutoff = 5000;

//main oscillator
const osc = new Tone.Oscillator({
  type: "sine",
  frequency: 440,
}).connect(filter); // make 440Hz sine, connect to lopass
osc.volume.value = -96; //initial volume

//second oscillator
const osc2 = new Tone.Oscillator({
  type: "sine",
  frequency: 435,
}).connect(filter); // make 440Hz sine, connect to lopass
osc2.volume.value = -96; //initial volume

const ringMod = new Tone.LFO({
  frequency: 5,
  amplitude: 0.25,
  min: 200,
  max: 800,
});

ringMod.connect(osc.frequency);

//"audioOn" code: optimised version of earlier code
//incorporating suggestions generated by chatGPT
//specifically, the line below, and setting audioOn to "true"
//to turn on audio on the first mouse click
let audioOn = false

function setup() {
  //create canvas the size of the window
  createCanvas(windowWidth, windowHeight);
  colorMode(RGB, 255);

  //set up text
  textAlign(CENTER, CENTER);
  textFont('Courier New');
  textStyle(BOLD);

  //create 'info' button
  let button = createButton('Help');
  button.size(width / 4);
  button.position (button.width /2, button.height / 2);
  button.mousePressed(clickme);
  button.touchStarted(clickme);
  button.style("font-family", "Courier New");
  button.style("font-size", `${windowWidth * 0.025}px`);
}

//click 'info' button
function clickme() {
  window.alert('No sound? \n\niOS: Turn silent mode off; turn up volume\nAndroid: Turn up volume')
}

function draw() {

  let touchX = mouseX;
  let touchY = mouseY;

  if (touches.length > 0) {
    for (var i = 0; i < touches.length; i++){
    touchX = touches[i].x;
    touchY = touches[i].y;
  }
}

if (mouseIsPressed || touches.length > 0) {
  if (!audioOn){
    //start osc on first click only
    Tone.start();
    osc.start();
    osc2.start();
    ringMod.start();
    audioOn = true; //set flag to true = audio stays on
  }

  let blueValue = map(touchX, 0, width, 50, 100); //mouseX&Y - p5 listener event functions
  let greenValue = map(touchY, 0, height, 50, 100);
  //console.log(mouseX, mouseY); //print
  background(0, greenValue, blueValue);
  niceTone(touchX, touchY);


  fill(255);
  text('X axis: sine wave', width / 2, height - 60);
  text('Y axis: ring modulated sine wave', width / 2, height - 30);

  } 
  else {
    fill(255); 
    osc.volume.rampTo(-96, 1); //volume to -96 when mouse/screen released
    osc2.volume.rampTo(-96, 1); 
  }
  

  //! = logical NOT: if mouse is *not* pressed
  //*and* screen is not touched, then...
  if (!mouseIsPressed && touches.length === 0) { 
    background(255);
    fill(0);
  
  let textScale = windowWidth * 0.05; //text size = 2.5% of screen size
  textSize(textScale);
  text('1. Tap to start audio', width / 2, height * 0.45);
  text('2. Move your finger', width / 2, height * 0.50);
  text('around the screen', width / 2, height * 0.55);
  // text('X axis: sine wave', width / 2, height - 60);
  // text('Y axis: ring modulated sine wave', width / 2, height - 30);

  }
}


//sine wave function
function niceTone(x, y){

//then do all of this (or **only** do this if audio is already on)
let oscFreq = map(x, 0, width, 440, 660);  //maps mouseX to...

//chatGPT - exp conversion for filter (Y axis)
let normalizedY = map(y, 0, height, 0, 1);
let cutoff = minCutoff * Math.pow(maxCutoff / minCutoff, normalizedY); // Exponential scaling

//LFO = Ring Mod modulator signal
let lfoFreq = map(y, 0, height, 430, 420);


ringMod.frequency.value = lfoFreq;
osc2.frequency.value = oscFreq;
filter.frequency.value = cutoff;

//ramp to this volume on touch
osc.volume.rampTo(-20, 1); 
osc2.volume.rampTo(-20, 1);

//print cutoff freq to console
console.log("Cutoff", cutoff); 
}


//chatGPT iOS stuff
//turns audio on and disables scrolling etc.
document.ontouchmove = function(event) {
  event.preventDefault();
};

document.ontouchstart = async function(event) {
  event.preventDefault();
  
  if (Tone.context.state !== 'running') {
    await Tone.context.resume();
  }
  
  if (!audioOn) {
    Tone.start();
    osc.start();
    osc2.start();
    ringMod.start();
    audioOn = true;
  }
};

document.ontouchmove = function(event) {
  event.preventDefault();
};